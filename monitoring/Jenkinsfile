pipeline {
    agent any

    environment {
        AWS_REGION = credentials('AWS_REGION')  // Jenkins Credentials에서 가져오기
        AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
        PRIVATE_MONITORING_ID = credentials('PRIVATE_MONITORING_ID')  // 프라이빗 EC2 ID
    }

    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    sh """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    def commandId = sh(script: """
                        aws ssm send-command --document-name "AWS-RunShellScript" \\
                            --targets Key=instanceIds,Values="${PRIVATE_MONITORING_ID}" \\
                            --parameters 'commands=[
                                "echo \\"✅ 배포 시작: 기존 컨테이너 정리 및 최신 이미지 가져오기\\"",
    
                                "cd /home/ubuntu || exit 1",
    
                                "echo \\"✅ AWS CLI 버전 확인...\\"",
                                "aws --version",
    
                                "git clone https://github.com/profect-Oops/Cloud-repo.git && cd Cloud-repo && git checkout dev",
    
                                "cd /home/ubuntu/Cloud-repo/monitoring",
    
                                "echo \\"✅ ECR 로그인 중...\\"",
                                "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com",
    
                                "echo \\"✅ 최신 이미지 Pull...\\"",
                                "docker-compose pull",
    
                                "docker-compose up -d",
                                
                                "echo \\"✅ 컨테이너 실행 상태 확인...\\"",
                                "docker ps -a",
    
                                "echo \\"✅ 컨테이너 헬스 체크...\\"",
                                "sleep 5",
                                "docker inspect --format={{.State.Running}} my-app || echo \\"❌ 컨테이너가 정상적으로 실행되지 않았습니다.\\""
                            ]' \\
                            --region "${AWS_REGION}" \\
                            --query "Command.CommandId" --output text
                    """, returnStdout: true).trim()

                    echo "🔍 SSM Command ID: ${commandId}"

                    sleep 10  // SSM 명령이 실행될 시간을 줌

                    def ssmStatus = sh(script: """
                        aws ssm list-command-invocations --command-id ${commandId} --details --region ${AWS_REGION} \\
                        --query "CommandInvocations[0].Status" --output text
                    """, returnStdout: true).trim()

                    echo "📌 SSM Command Status: ${ssmStatus}"

                    if (ssmStatus != "Success") {
                        error("🚨 SSM 배포 실패! Command ID: ${commandId}")
                    }

                    echo "✅ SSM 배포 성공!"
                }
            }
        }
    }
}