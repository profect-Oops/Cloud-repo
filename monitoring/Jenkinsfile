pipeline {
    agent any

    environment {
        AWS_REGION = credentials('AWS_REGION')
        AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
        ECR_REPO = credentials('ECR_REPO')
    }

    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Get AWS Account ID') {
            steps {
                script {
                    echo "🔍 AWS 계정 ID 가져오기"
                    env.AWS_ACCOUNT_ID = sh(script: "aws sts get-caller-identity --query Account --output text", returnStdout: true).trim()
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    echo "🔑 AWS ECR 로그인 수행"
                    def loginStatus = sh(script: '''
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                    ''', returnStatus: true)

                    if (loginStatus != 0) {
                        error "❌ AWS ECR 로그인 실패! Credentials를 확인하세요."
                    }
                }
            }
        }

        stage('Check & Pull latest images if needed') {
            steps {
                script {
                    def images = [
                        ["name": "prometheus", "repo": "prom/prometheus"],
                        ["name": "grafana", "repo": "grafana/grafana"],
                        ["name": "node-exporter", "repo": "prom/node-exporter"],
                        ["name": "loki", "repo": "grafana/loki"],
                        ["name": "promtail", "repo": "grafana/promtail"]
                    ]

                    def imagesToPush = ""  // 로컬 변수로 설정

                    for (image in images) {
                        def imageName = image["name"]
                        def imageRepo = image["repo"]

                        // ECR에서 현재 저장된 SHA Digest 가져오기
                        def ecrDigest = sh(script: """
                            aws ecr describe-images --repository-name oops/monitoring --image-ids imageTag=${imageName} --region ${AWS_REGION} --query 'imageDetails[0].imageDigest' --output text 2>/dev/null || echo "not_found"
                        """, returnStdout: true).trim()

                        // Docker Hub에서 최신 SHA Digest 가져오기
                        def dockerHubDigest = sh(script: """
                            curl -s https://hub.docker.com/v2/repositories/${imageRepo}/tags/latest | jq -r '.images[0].digest' 2>/dev/null || echo "not_found"
                        """, returnStdout: true).trim()

                        if (ecrDigest == "not_found") {
                            echo "🚀 ECR에 ${imageName} 이미지 없음 → Pull & Push 실행"
                            sh "docker pull ${imageRepo}:latest"
                            imagesToPush += "${imageName} "
                        } else if (dockerHubDigest == "not_found") {
                            echo "⚠️ Docker Hub에서 ${imageRepo}:latest 정보를 가져오지 못했습니다. Pull & Push 생략."
                        } else if (dockerHubDigest == ecrDigest) {
                            echo "✅ 최신 이미지 유지됨: ${imageRepo} → Pull & Push 생략"
                        } else {
                            echo "🔄 새로운 이미지 발견: ${imageRepo} → Pull & Push 실행"
                            sh "docker pull ${imageRepo}:latest"
                            imagesToPush += "${imageName} "
                        }
                    }

                    env.IMAGES_TO_PUSH = imagesToPush.trim()  // 최종적으로 env 변수에 할당
                    echo "🔥 IMAGES_TO_PUSH 최종값: '${env.IMAGES_TO_PUSH}'"
                }
            }
        }

        stage('Tag and Push to ECR') {
            when {
                expression { env.IMAGES_TO_PUSH?.trim() && env.IMAGES_TO_PUSH != "" }
            }
            steps {
                script {
                    def images = [
                        ["name": "prometheus", "repo": "prom/prometheus"],
                        ["name": "grafana", "repo": "grafana/grafana"],
                        ["name": "node-exporter", "repo": "prom/node-exporter"],
                        ["name": "loki", "repo": "grafana/loki"],
                        ["name": "promtail", "repo": "grafana/promtail"]
                    ]

                    for (image in images) {
                        def imageName = image["name"]
                        def imageRepo = image["repo"]

                        if (env.IMAGES_TO_PUSH.contains(imageName)) {
                            echo "🚀 Pushing ${imageName} to ECR"

                            def localImageCheck = sh(script: "docker images -q ${imageRepo}:latest", returnStdout: true).trim()
                            if (localImageCheck == "") {
                                error "❌ ${imageRepo}:latest 이미지가 로컬에 존재하지 않습니다!"
                            }

                            sh """
                            docker tag ${imageRepo}:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/oops/monitoring:${imageName}
                            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/oops/monitoring:${imageName}
                            """
                        } else {
                            echo "✅ ${imageName}는 최신 버전이므로 Push 생략!"
                        }
                    }
                }
            }
        }
    }
}
