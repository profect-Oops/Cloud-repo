pipeline {
    agent any

    environment {
        AWS_REGION = credentials('AWS_REGION')  // AWS 리전 설정
        AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')  // AWS 계정 ID
    }

    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Check AWS Credentials') {
            steps {
                script {
                    sh '''
                    echo "AWS_REGION: ${env.AWS_REGION}"
                    echo "AWS_ACCOUNT_ID: ${env.AWS_ACCOUNT_ID}"
                    '''
                }
            }
        }

        stage('Login to ECR') {   
            steps {
                script {
                    sh '''
                    aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com
                    '''
                }
            }
        }

        stage('Check & Pull latest images if needed') {
            steps {
                script {
                    def images = [
                        ["name": "prometheus", "repo": "prom/prometheus"],
                        ["name": "grafana", "repo": "grafana/grafana"],
                        ["name": "node-exporter", "repo": "prom/node-exporter"],
                        ["name": "loki", "repo": "grafana/loki"],
                        ["name": "promtail", "repo": "grafana/promtail"]
                    ]

                    for (image in images) {
                        def imageName = image["name"]
                        def imageRepo = image["repo"]

                        // ECR에서 최신 SHA Digest 확인
                        def ecrDigest = sh(script: """
                            aws ecr describe-images --repository-name oops/monitoring --image-ids imageTag=${imageName} --region ${env.AWS_REGION} --query 'imageDetails[0].imageDigest' --output text 2>/dev/null
                        """, returnStdout: true).trim()

                        // Docker Hub에서 최신 SHA Digest 가져오기
                        def dockerHubDigest = sh(script: """
                            curl -s https://hub.docker.com/v2/repositories/${imageRepo}/tags/latest | jq -r '.images[0].digest' 2>/dev/null || echo "not_found"
                        """, returnStdout: true).trim()

                        if (dockerHubDigest == "not_found" || dockerHubDigest.isEmpty()) {
                            echo "⚠️ Docker Hub에서 ${imageRepo}:latest 정보를 가져오지 못했습니다. 기본적으로 Pull 진행."
                            sh "docker pull ${imageRepo}:latest"
                        } else if (dockerHubDigest != ecrDigest) {
                            echo "🔄 새로운 이미지 발견: ${imageRepo}, Pull 진행!"
                            sh "docker pull ${imageRepo}:latest"
                        } else {
                            echo "✅ 최신 이미지 유지됨: ${imageRepo}, Pull 생략!"
                        }
                    }
                }
            }
        }

        stage('Tag and Push to ECR') {
            steps {
                script {
                    def images = [
                        ["name": "prometheus", "repo": "prom/prometheus"],
                        ["name": "grafana", "repo": "grafana/grafana"],
                        ["name": "node-exporter", "repo": "prom/node-exporter"],
                        ["name": "loki", "repo": "grafana/loki"],
                        ["name": "promtail", "repo": "grafana/promtail"]
                    ]

                    for (image in images) {
                        def imageName = image["name"]
                        def imageRepo = image["repo"]

                        sh """
                        docker tag ${imageRepo}:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/oops/monitoring:${imageName}
                        docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/oops/monitoring:${imageName}
                        """
                    }
                }
            }
        }
    }
}
