pipeline {
    agent any

    environment {
        AWS_REGION = credentials('AWS_REGION')  // Jenkins Credentials에서 가져오기
        ECR_REPO = credentials('ECR_REPO')  // Amazon ECR 리포지토리
        PRIVATE_MONITORING_ID = credentials('PRIVATE_MONITORING_ID')  // 프라이빗 EC2 ID
    }

    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Get AWS Account ID') {
            steps {
                script {
                    env.AWS_ACCOUNT_ID = sh(script: "aws sts get-caller-identity --query Account --output text", returnStdout: true).trim()
                }
            }
        }

        stage('Login to ECR') {   
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                }
            }
        }

        stage('Pull latest images from Docker Hub') {
            steps {
                script {
                    sh """
                    docker pull prom/prometheus:latest
                    docker pull grafana/grafana:latest
                    docker pull prom/node-exporter:latest
                    docker pull grafana/loki:latest
                    docker pull grafana/promtail:latest
                    """
                }
            }
        }

        stage('Tag and Push to ECR') {
            steps {
                script {
                    sh """
                    docker tag prom/prometheus:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:prometheus
                    docker tag grafana/grafana:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:grafana
                    docker tag prom/node-exporter:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:node-exporter
                    docker tag grafana/loki:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:loki
                    docker tag grafana/promtail:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:promtail

                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:prometheus
                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:grafana
                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:node-exporter
                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:loki
                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:promtail
                    """
                }
            }
        }

        stage('Deploy') {
    steps {
        script {
            sh """
            aws ssm send-command --document-name "AWS-RunShellScript" \
                --targets Key=instanceIds,Values=${PRIVATE_INSTANCE_ID} \
                --parameters 'commands=[
                    "echo \\"✅ 배포 시작: 기존 컨테이너 정리 및 최신 이미지 가져오기\\"",
                    
                    "sudo apt update -y && sudo apt upgrade -y",
                    
                    "echo \\"✅ Docker 최신 버전 설치 중...\\"",
                    "sudo mkdir -p /etc/apt/keyrings",
                    "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null",
                    "sudo chmod a+r /etc/apt/keyrings/docker.asc",
                    "echo \\"deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null",
                    "sudo apt update",
                    "sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin",
                    
                    "echo \\"✅ Docker 서비스 활성화 및 사용자 그룹 추가 중...\\"",
                    "sudo systemctl enable --now docker",
                    "sudo usermod -aG docker ubuntu",

                    "echo \\"✅ Docker Compose 설치 중...\\"",
                    "sudo apt install -y jq",
                    "DOCKER_COMPOSE_VERSION=\$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r \\".tag_name\\")",
                    "sudo curl -L \\"https://github.com/docker/compose/releases/download/\${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)\\" -o /usr/local/bin/docker-compose",
                    "sudo chmod +x /usr/local/bin/docker-compose",
                    
                    "echo \\"✅ 설치된 버전 확인 중...\\"",
                    "docker --version",
                    "docker-compose --version",

                    "echo \\"✅ 최신 코드 가져오기...\\"",
                    "git pull origin dev",
                    "cd /home/ubuntu/Cloud-repo/monitoring",

                    "echo \\"✅ 기존 컨테이너 정리...\\"",
                    "docker-compose down",

                    "echo \\"✅ 새로운 Docker 컨테이너 실행 (docker-compose up -d)...\\"",
                    "docker-compose up -d",

                    "echo \\"✅ 컨테이너 실행 상태 확인...\\"",
                    "docker ps -a",

                    "echo \\"✅ 컨테이너 헬스 체크...\\"",
                    "sleep 5",
                    "docker inspect --format='{{.State.Running}}' my-app"
                ]' \
                --region ${AWS_REGION}
            """
        }
    }
}
    }
}