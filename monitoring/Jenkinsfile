pipeline {
    agent any

    environment {
        AWS_REGION = credentials('AWS_REGION')  // Jenkins Credentials에서 가져오기
        ECR_REPO = credentials('ECR_REPO')  // Amazon ECR 리포지토리
        PRIVATE_MONITORING_ID = credentials('PRIVATE_MONITORING_ID')  // 프라이빗 EC2 ID
    }

    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Get AWS Account ID') {
            steps {
                script {
                    env.AWS_ACCOUNT_ID = sh(script: "aws sts get-caller-identity --query Account --output text", returnStdout: true).trim()
                }
            }
        }

        stage('Login to ECR') {   
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                }
            }
        }

        stage('Pull latest images from Docker Hub') {
            steps {
                script {
                    sh """
                    docker pull prom/prometheus:latest
                    docker pull grafana/grafana:latest
                    docker pull prom/node-exporter:latest
                    docker pull grafana/loki:latest
                    docker pull grafana/promtail:latest
                    """
                }
            }
        }

        stage('Tag and Push to ECR') {
            steps {
                script {
                    sh """
                    docker tag prom/prometheus:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:prometheus
                    docker tag grafana/grafana:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:grafana
                    docker tag prom/node-exporter:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:node-exporter
                    docker tag grafana/loki:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:loki
                    docker tag grafana/promtail:latest ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:promtail

                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:prometheus
                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:grafana
                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:node-exporter
                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:loki
                    docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/oops/monitoring:promtail
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh """
                    aws ssm send-command --document-name "AWS-RunShellScript" \\
                        --targets Key=instanceIds,Values="$PRIVATE_MONITORING_ID" \\
                        --parameters 'commands=[
                            "echo \\"✅ 배포 시작: 기존 컨테이너 정리 및 최신 이미지 가져오기\\"",

                            "cd /home/ubuntu || exit 1",

                            "if [ -d \\"Cloud-repo\\" ]; then",
                            "   echo \\"✅ Cloud-repo 폴더가 존재합니다. Git Pull 수행 중...\\"",
                            "   cd Cloud-repo && git pull origin dev",
                            "else",
                            "   echo \\"❗ Cloud-repo 폴더가 없습니다. Git Clone 수행 중...\\"",
                            "   git clone https://github.com/profect-Oops/Cloud-repo.git && cd Cloud-repo && git checkout dev",
                            "fi",

                            "echo \\"✅ ECR 로그인 중...\\"",
                            "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com",

                            "echo \\"✅ 실행 중인 컨테이너 재시작...\\"",
                            "docker ps -q | xargs -r docker restart",

                            "echo \\"✅ ECR 최신 이미지 Pull...\\"",
                            "docker-compose pull",

                            "echo \\"✅ 새로운 Docker 컨테이너 실행 (docker-compose up -d)...\\"",
                            "docker-compose up -d --remove-orphans",

                            "echo \\"✅ 컨테이너 실행 상태 확인...\\"",
                            "docker ps -a",

                            "echo \\"✅ 컨테이너 헬스 체크...\\"",
                            "sleep 5",
                            "docker inspect --format='{{.State.Running}}' my-app"
                        ]' \\
                        --region "$AWS_REGION"
                    """
                }
            }
        }
    }
}